version: "3.7"

services:

  # --------------
  # The database
  # --------------
  database:
    image: mongo:5.0
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./services/database/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
      - ./db:/data/db
    environment:
      # read from .env file
      MONGO_INITDB_DATABASE: ${DB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${DB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}

  # ------------------
  # Live Recording
  # - stream service
  # ------------------
  live:
    build:
      context: ./services/recording
      dockerfile: ./Dockerfile.live
    restart: always
    command: python entrypoint.py
    volumes:
      - ./configs/live/config.yaml:/usr/config.yaml
    environment:
      # hard-coded since it refers to the database service above
      DB_HOST: database
      DB_PORT: 27017
      # read from .env file
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      NODE_PROVIDER_WSS_URI: ${NODE_PROVIDER_WSS_URI}
      NODE_PROVIDER_RPC_URI: ${NODE_PROVIDER_RPC_URI}
    depends_on:
      - database

  # --------------------------------
  # Historical Recording & RPC API
  # - redis as broker
  # - rpc api service
  # - celery workers
  # --------------------------------
  redis:
    image: redis:alpine
    restart: always

  historical-rpc-api:
    build:
      context: ./services/recording
      dockerfile: ./Dockerfile.historical
    restart: always
    command: uvicorn src.historical.app:app --host 0.0.0.0 --port 80
    expose:
      - 80
    volumes:
      - ./configs/historical/config.yaml:/usr/config.yaml
    environment:
      REDIS_URI: "redis://redis:6379"
      # hard-coded since it refers to the database service above
      DB_HOST: database
      DB_PORT: 27017
      # read from .env file
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      ETHERSCAN_API_KEY: ${ETHERSCAN_API_KEY}
      NODE_PROVIDER_RPC_URI: ${NODE_PROVIDER_RPC_URI}
    depends_on:
      - redis

  historical-workers:
    build:
      context: ./services/recording
      dockerfile: Dockerfile.historical
    restart: always
    # Limit concurrency to prevent etherscan rate limits
    command: celery -A src.historical worker -l INFO --concurrency=2 --uid nobody --gid nogroup
    volumes:
      - ./configs/historical/config.yaml:/usr/config.yaml
    environment:
      REDIS_URI: "redis://redis:6379"
      # hard-coded since it refers to the database service above
      DB_HOST: database
      DB_PORT: 27017
      # read from .env file
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      ETHERSCAN_API_KEY: ${ETHERSCAN_API_KEY}
      NODE_PROVIDER_RPC_URI: ${NODE_PROVIDER_RPC_URI}
    depends_on:
      - database
      - redis

  # -------------------------
  # Interface (RESTful API)
  # -------------------------
  interface:
    build:
      context: ./services/interface
      dockerfile: Dockerfile
    restart: always
    command: uvicorn src.app:app --host 0.0.0.0 --port 80
    expose:
      - 80
    environment:
      # hard-coded since it refers to the database service above
      DB_HOST: database
      DB_PORT: 27017
      # read from .env file
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - database

  # --------------------------------
  # Proxy for RPC and RESTful APIs
  # Use this for now just so we
  # have both on the same host/port
  # --------------------------------
  proxy:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
    restart: always
    ports:
      - 80:80
    depends_on:
      - historical-rpc-api
      - interface
